package com.example.githubexamplea.data

import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.util.Log
import com.example.githubexamplea.dao.LeaderDao
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File

class InsertLeaderExample(private val db: SQLiteDatabase, private val context: Context) {

    suspend fun insertLeaders() = withContext(Dispatchers.IO) {
        val leaderDao = LeaderDao(db)

        Log.d("DB_INSERT", "Î¶¨Îçî Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ ÏãúÏûë")

        // Î¶¨Îçî Ï†ïÎ≥¥ Î¶¨Ïä§Ìä∏ (club_name, id, leader_introduction, club_introduction, leader_career, leader_photo)
        val leaders = listOf(
            arrayOf("Kicks & Dreams", "miso", "ÏïàÎÖïÌïòÏÑ∏Ïöî. \nKicks & DreamsÏùò \nÎ™®ÏûÑÏû• ÍπÄÎØ∏ÏÜå ÏûÖÎãàÎã§.", "Ï∂ïÍµ¨Î•º ÏÇ¨ÎûëÌïòÎäî ÏÇ¨ÎûåÎì§Ïùò Î™®ÏûÑ", "Kicks & Dreams Î™®ÏûÑÏû•/Happy Soccer Î™®ÏûÑÏû•/ÎÇòÏù¥ÌÇ§ ÎßàÏºÄÌÑ∞", "leader_miso.jpg"),
            arrayOf("Breathe", "future", "ÏïàÎÖïÌïòÏÑ∏Ïöî. \nBreatheÏùò \nÎ™®ÏûÑÏû• Ïù¥ÎØ∏Îûò ÏûÖÎãàÎã§.", "Ï∞®Î∂ÑÌïòÍ≤å Ï†ïÎ¶¨ÌïòÎäî ÏãúÍ∞ÑÏùÑ Í∞ÄÏ†∏Î¥êÏöî", "Breathe Î™®ÏûÑÏû•/Marathon Club Ïö¥ÏòÅÏßÑ/Ï≤¥Ïú° ÍµêÏú° Ï†ÑÍ≥µ", "leader_future.jpg"),
            arrayOf("Hit & Hustle", "jun", "ÏïàÎÖïÌïòÏÑ∏Ïöî. \nHit & HustleÏùò \nÎ™®ÏûÑÏû• Ïù¥ÏÑ±Ï§Ä ÏûÖÎãàÎã§.", "ÏïºÍµ¨Ïóê ÏßÑÏã¨Ïù∏ ÏÇ¨ÎûåÎì§Ïùò Î™®ÏûÑ", "Hit & HustleÏùò Î™®ÏûÑÏû•/Ïó∞ÏÜç 3Î≤à ÎØøÏùÑÎßåÌïú Î™®ÏûÑÏû• ÏÑ†Ï†ï!", "leader_jun.jpg")
        )

        try {
            for (leaderData in leaders) {
                val imagePath = copyImageToInternalStorage(context, leaderData[5]) // üîπ suspend Ìï®ÏàòÎ°ú Î≥ÄÍ≤ΩÎê®
                val result = leaderDao.insertLeader(
                    clubName = leaderData[0],
                    leaderId = leaderData[1],
                    leaderIntroduction = leaderData[2],
                    clubIntroduction = leaderData[3],
                    leaderCareer = leaderData[4],
                    leaderPhotoPath = imagePath
                )
                Log.d("DB_INSERT", "ÏÇΩÏûÖÎêú Îç∞Ïù¥ÌÑ∞ ID: ${leaderData[1]}, result=$result")
            }
        } catch (e: Exception) {
            Log.e("DB_INSERT", "Î¶¨Îçî Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ Ï§ë Ïò§Î•ò Î∞úÏÉù: ${e.message}")
        }
    }

    private suspend fun copyImageToInternalStorage(context: Context, fileName: String): String =
        withContext(Dispatchers.IO) {
            val directory = File(context.filesDir, "user_images")
            if (!directory.exists()) directory.mkdirs() // ÎîîÎ†âÌÜ†Î¶¨ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±

            val file = File(directory, fileName)

            return@withContext try {
                val inputStream = context.assets.open("images/$fileName")
                file.outputStream().use { outputStream ->
                    inputStream.copyTo(outputStream)
                }
                Log.d("FileCopyDebug", "Ïù¥ÎØ∏ÏßÄ Î≥µÏÇ¨ ÏÑ±Í≥µ: ${file.absolutePath}")
                file.absolutePath
            } catch (e: Exception) {
                Log.e("FileCopyDebug", "Ïù¥ÎØ∏ÏßÄ Î≥µÏÇ¨ Ïã§Ìå®: ${e.message}")
                ""
            }
        }
}
